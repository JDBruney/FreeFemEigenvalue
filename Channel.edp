//See https://doc.freefem.org/models/eigen-value-problems.html

// Parameters
verbosity=0;
real sigma = 0; //value of the shift
int nev = 10; //number of computed eigen value close to sigma
real a = 0.2;   //amplitude of oscillation
int Wall = 1;
int Per1 = 2;
int Per2 = 3;
int Const= 4;
real length=1;
int Res = 40;   //Resolution of Solver
 
// Define mesh boundaries
border Gamma1(t=length, 0){x=t; y=1-a*cos(2*pi*t);label=Wall;}
border Gamma2(t=1-a, 0){x=0; y=t;label=Per1;}
border Gamma3(t=0, length){x=t; y=0;label=Wall;}
border Gamma4(t=0, 1-a){x=length; y=t;label=Per2;}
 
// Mesh
mesh Th = buildmesh(Gamma1(floor(Res*length))+Gamma2(Res)+Gamma3(floor(Res*length))+Gamma4(Res));
 
 
// Plot the Mesh
plot(Th, wait=true);

 
// Fespace
fespace Vh(Th, P1, periodic=[[Per1, y],[Per2, y]]);
Vh u1, u2;
 
// Problem
// OP = A - sigma B ; // the shifted matrix
varf op (u1, u2)
    = int2d(Th)(
           dx(u1)*dx(u2)
         + dy(u1)*dy(u2)
         + sigma* u1*u2
    );
// Boundary Conditions    + on(1, 2, 3, 4, u1=0)

 
varf b ([u1], [u2]) = int2d(Th)(u1*u2); //no boundary condition
 
 matrix OP = op(Vh, Vh, solver=Crout, factorize=1); //crout solver because the matrix in not positive
 matrix B = b(Vh, Vh, solver=CG, eps=1e-20);
 
// important remark:
// the boundary condition is make with exact penalization:
// we put 1e30=tgv on the diagonal term of the lock degree of freedom.
// So take Dirichlet boundary condition just on $a$ variational form
// and not on $b$ variational form.
// because we solve $ w=OP^-1*B*v $

// Solve
real[int] ev(nev); //to store the nev eigenvalue
Vh[int] eV(nev); //to store the nev eigenvector
 
int k = EigenValue(OP, B, sym=true, sigma=sigma, value=ev, vector=eV,
tol=1e-10, maxit=0, ncv=0);

// Display & Plot
for (int i = 0; i < k; i++){
    u1 = eV[i];
    real gg = int2d(Th)(dx(u1)*dx(u1) + dy(u1)*dy(u1));
    real mm = int2d(Th)(u1*u1) ;
    cout << "lambda[" << i << "] = " << ev[i] << ", err= " << int2d(Th)(dx(u1)*dx(u1) + dy(u1)*dy(u1) - (ev[i])*u1*u1) << endl;
 plot(eV[i], cmm="Eigen Vector "+i+" value ="+ev[i], wait=true, value=true);
 }