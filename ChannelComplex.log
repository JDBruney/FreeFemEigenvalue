-- FreeFem++ v4.9 (Tue, Apr 20, 2021 12:10:29 AM - git v4.9)
 Load: lg_fem lg_mesh lg_mesh3 eigenvalue
    1 : //See https://doc.freefem.org/models/eigen-value-problems.html
    2 :
    3 : // Parameters
    4 : verbosity=0;
    5 : complex sigma = 0; //value of the shift
    6 : int nev = 5; //number of computed eigen value close to sigma
    7 : real a = 0.2;   //amplitude of oscillation
    8 : int Wall = 1;
    9 : int Per1 = 2;
   10 : int Per2 = 3;
   11 : int Const= 4;
   12 : real length=1;
   13 : int Res = 180;   //Resolution of Solver
   14 :
   15 : // Define mesh boundaries
   16 : border Gamma1(t=length, 0){x=t; y=1-a*cos(2*pi*t);label=Wall;}
   17 : border Gamma2(t=1-a, 0){x=0; y=t;label=Per1;}
   18 : border Gamma3(t=0, length){x=t; y=0;label=Wall;}
   19 : border Gamma4(t=0, 1-a){x=length; y=t;label=Per2;}
   20 :
   21 : // Mesh
   22 : mesh Th = buildmesh(Gamma1(floor(Res*length))+Gamma2(Res)+Gamma3(floor(Res*length))+Gamma4(Res));
   23 :
   24 :
   25 : // Plot the Mesh
   26 : plot(Th, wait=true);
   27 :
   28 :
   29 : // Fespace
   30 : fespace Vh(Th, P1, periodic=[[Per1, y],[Per2, y]]);
   31 : Vh<complex> u1, u2;
   32 :
   33 : // Problem
   34 : // OP = A - sigma B ; // the shifted matrix
   35 : varf op (u1, u2)
   36 :     = int2d(Th)(
   37 :            dx(u1)*dx(u2)
   38 :          + dy(u1)*dy(u2)
   39 :          + sigma* u1*u2
   40 :     );
   41 : // Boundary Conditions    + on(1, 2, 3, 4, u1=0)
   42 :
   43 :
   44 : varf b ([u1], [u2]) = int2d(Th)(u1*u2); //no boundary condition
   45 :
   46 :  matrix<complex> OP = op(Vh, Vh, solver=Crout, factorize=1); //crout solver because the matrix in not positive
   47 :  matrix B = b(Vh, Vh, solver=CG, eps=1e-20);
   48 :
   49 : // important remark:
   50 : // the boundary condition is make with exact penalization:
   51 : // we put 1e30=tgv on the diagonal term of the lock degree of freedom.
   52 : // So take Dirichlet boundary condition just on $a$ variational form
   53 : // and not on $b$ variational form.
   54 : // because we solve $ w=OP^-1*B*v $
   55 :
   56 : // Solve
   57 : complex[int] ev(nev); //to store the ral part nev eigenvalue
   58 : real[int] iev(nev); //to store the imaginary part nev eigenvalue
   59 : Vh[int] eV(nev); //to store the nev eigenvector
   60 :
   61 : int k = EigenValue(OP, B,  sigma=sigma, value=ev,vector=eV,
   62 : tol=1e-10, maxit=90000, ncv=10) error operator (  <14Matrice_CreuseISt7complexIdEE>, <14Matrice_CreuseIdE>
 List of choices
         (        <l> :   <14Matrice_CreuseIdE>, <14Matrice_CreuseIdE> )
         (        <l> :   <l> )
         (        <l> :   <l>, <11Polymorphic>, <11Polymorphic> )
         (        <l> :   <l>, <11Polymorphic> )
         (        <l> :   <14Matrice_CreuseISt7complexIdEE>, <14Matrice_CreuseISt7complexIdEE> )
 
 Error line number 62, in file C:\Users\Bruney\Desktop\FreeFem\EigenvalueG\ChannelComplex.edp, before  token )
 
  current line = 62
Compile error :
        line number :62, )
error Compile error :
        line number :62, )
 code = 1 mpirank: 0
 try getConsole C:\Users\Bruney\Desktop\FreeFem\EigenvalueG\ChannelComplex.edp
